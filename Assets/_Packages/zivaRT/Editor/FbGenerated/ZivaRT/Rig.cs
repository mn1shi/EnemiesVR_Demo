// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ZivaRT
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

internal struct Rig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Rig GetRootAsRig(ByteBuffer _bb) { return GetRootAsRig(_bb, new Rig()); }
  public static Rig GetRootAsRig(ByteBuffer _bb, Rig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RigBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ZVRT"); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Rig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ZivaRT.Version? Version { get { int o = __p.__offset(4); return o != 0 ? (ZivaRT.Version?)(new ZivaRT.Version()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ZivaRT.RestPose? RestPose { get { int o = __p.__offset(6); return o != 0 ? (ZivaRT.RestPose?)(new ZivaRT.RestPose()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ZivaRT.Skinning? Skinning { get { int o = __p.__offset(8); return o != 0 ? (ZivaRT.Skinning?)(new ZivaRT.Skinning()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ZivaRT.Correctives? Correctives { get { int o = __p.__offset(10); return o != 0 ? (ZivaRT.Correctives?)(new ZivaRT.Correctives()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ZivaRT.Scalars? Scalars { get { int o = __p.__offset(12); return o != 0 ? (ZivaRT.Scalars?)(new ZivaRT.Scalars()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ZivaRT.Rig> CreateRig(FlatBufferBuilder builder,
      Offset<ZivaRT.Version> versionOffset = default(Offset<ZivaRT.Version>),
      Offset<ZivaRT.RestPose> rest_poseOffset = default(Offset<ZivaRT.RestPose>),
      Offset<ZivaRT.Skinning> skinningOffset = default(Offset<ZivaRT.Skinning>),
      Offset<ZivaRT.Correctives> correctivesOffset = default(Offset<ZivaRT.Correctives>),
      Offset<ZivaRT.Scalars> scalarsOffset = default(Offset<ZivaRT.Scalars>)) {
    builder.StartTable(5);
    Rig.AddScalars(builder, scalarsOffset);
    Rig.AddCorrectives(builder, correctivesOffset);
    Rig.AddSkinning(builder, skinningOffset);
    Rig.AddRestPose(builder, rest_poseOffset);
    Rig.AddVersion(builder, versionOffset);
    return Rig.EndRig(builder);
  }

  public static void StartRig(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddVersion(FlatBufferBuilder builder, Offset<ZivaRT.Version> versionOffset) { builder.AddOffset(0, versionOffset.Value, 0); }
  public static void AddRestPose(FlatBufferBuilder builder, Offset<ZivaRT.RestPose> restPoseOffset) { builder.AddOffset(1, restPoseOffset.Value, 0); }
  public static void AddSkinning(FlatBufferBuilder builder, Offset<ZivaRT.Skinning> skinningOffset) { builder.AddOffset(2, skinningOffset.Value, 0); }
  public static void AddCorrectives(FlatBufferBuilder builder, Offset<ZivaRT.Correctives> correctivesOffset) { builder.AddOffset(3, correctivesOffset.Value, 0); }
  public static void AddScalars(FlatBufferBuilder builder, Offset<ZivaRT.Scalars> scalarsOffset) { builder.AddOffset(4, scalarsOffset.Value, 0); }
  public static Offset<ZivaRT.Rig> EndRig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZivaRT.Rig>(o);
  }
  public static void FinishRigBuffer(FlatBufferBuilder builder, Offset<ZivaRT.Rig> offset) { builder.Finish(offset.Value, "ZVRT"); }
  public static void FinishSizePrefixedRigBuffer(FlatBufferBuilder builder, Offset<ZivaRT.Rig> offset) { builder.FinishSizePrefixed(offset.Value, "ZVRT"); }
};


}
