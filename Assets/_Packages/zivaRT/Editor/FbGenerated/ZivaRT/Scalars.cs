// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ZivaRT
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

internal struct Scalars : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Scalars GetRootAsScalars(ByteBuffer _bb) { return GetRootAsScalars(_bb, new Scalars()); }
  public static Scalars GetRootAsScalars(ByteBuffer _bb, Scalars obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Scalars __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ScalarNames(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ScalarNamesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float NeutralValues(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int NeutralValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetNeutralValuesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetNeutralValuesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetNeutralValuesArray() { return __p.__vector_as_array<float>(6); }
  public ZivaRT.CorrectiveType CorrectiveType { get { int o = __p.__offset(8); return o != 0 ? (ZivaRT.CorrectiveType)__p.bb.GetSbyte(o + __p.bb_pos) : ZivaRT.CorrectiveType.TensorSkin; } }
  public ZivaRT.ActiveTransformParts ActiveTransformParts { get { int o = __p.__offset(10); return o != 0 ? (ZivaRT.ActiveTransformParts)__p.bb.GetSbyte(o + __p.bb_pos) : ZivaRT.ActiveTransformParts.FullTransform; } }
  public ZivaRT.Network? Networks(int j) { int o = __p.__offset(12); return o != 0 ? (ZivaRT.Network?)(new ZivaRT.Network()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NetworksLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ZivaRT.Scalars> CreateScalars(FlatBufferBuilder builder,
      VectorOffset scalar_namesOffset = default(VectorOffset),
      VectorOffset neutral_valuesOffset = default(VectorOffset),
      ZivaRT.CorrectiveType corrective_type = ZivaRT.CorrectiveType.TensorSkin,
      ZivaRT.ActiveTransformParts active_transform_parts = ZivaRT.ActiveTransformParts.FullTransform,
      VectorOffset networksOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Scalars.AddNetworks(builder, networksOffset);
    Scalars.AddNeutralValues(builder, neutral_valuesOffset);
    Scalars.AddScalarNames(builder, scalar_namesOffset);
    Scalars.AddActiveTransformParts(builder, active_transform_parts);
    Scalars.AddCorrectiveType(builder, corrective_type);
    return Scalars.EndScalars(builder);
  }

  public static void StartScalars(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddScalarNames(FlatBufferBuilder builder, VectorOffset scalarNamesOffset) { builder.AddOffset(0, scalarNamesOffset.Value, 0); }
  public static VectorOffset CreateScalarNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScalarNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScalarNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeutralValues(FlatBufferBuilder builder, VectorOffset neutralValuesOffset) { builder.AddOffset(1, neutralValuesOffset.Value, 0); }
  public static VectorOffset CreateNeutralValuesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNeutralValuesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNeutralValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCorrectiveType(FlatBufferBuilder builder, ZivaRT.CorrectiveType correctiveType) { builder.AddSbyte(2, (sbyte)correctiveType, 0); }
  public static void AddActiveTransformParts(FlatBufferBuilder builder, ZivaRT.ActiveTransformParts activeTransformParts) { builder.AddSbyte(3, (sbyte)activeTransformParts, 0); }
  public static void AddNetworks(FlatBufferBuilder builder, VectorOffset networksOffset) { builder.AddOffset(4, networksOffset.Value, 0); }
  public static VectorOffset CreateNetworksVector(FlatBufferBuilder builder, Offset<ZivaRT.Network>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNetworksVectorBlock(FlatBufferBuilder builder, Offset<ZivaRT.Network>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNetworksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ZivaRT.Scalars> EndScalars(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZivaRT.Scalars>(o);
  }
};


}
