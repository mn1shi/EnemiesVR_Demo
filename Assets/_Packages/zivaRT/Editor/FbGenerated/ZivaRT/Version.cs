// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ZivaRT
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

internal struct Version : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Version GetRootAsVersion(ByteBuffer _bb) { return GetRootAsVersion(_bb, new Version()); }
  public static Version GetRootAsVersion(ByteBuffer _bb, Version obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Version __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ProjectName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProjectNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetProjectNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetProjectNameArray() { return __p.__vector_as_array<byte>(4); }
  public int MajorVersion { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public int MinorVersion { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public int PatchVersion { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<ZivaRT.Version> CreateVersion(FlatBufferBuilder builder,
      StringOffset project_nameOffset = default(StringOffset),
      int major_version = -1,
      int minor_version = -1,
      int patch_version = -1) {
    builder.StartTable(4);
    Version.AddPatchVersion(builder, patch_version);
    Version.AddMinorVersion(builder, minor_version);
    Version.AddMajorVersion(builder, major_version);
    Version.AddProjectName(builder, project_nameOffset);
    return Version.EndVersion(builder);
  }

  public static void StartVersion(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddProjectName(FlatBufferBuilder builder, StringOffset projectNameOffset) { builder.AddOffset(0, projectNameOffset.Value, 0); }
  public static void AddMajorVersion(FlatBufferBuilder builder, int majorVersion) { builder.AddInt(1, majorVersion, -1); }
  public static void AddMinorVersion(FlatBufferBuilder builder, int minorVersion) { builder.AddInt(2, minorVersion, -1); }
  public static void AddPatchVersion(FlatBufferBuilder builder, int patchVersion) { builder.AddInt(3, patchVersion, -1); }
  public static Offset<ZivaRT.Version> EndVersion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZivaRT.Version>(o);
  }
};


}
