// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ZivaRT
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Compressed Sparse Column
internal struct SparseMatrix : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SparseMatrix GetRootAsSparseMatrix(ByteBuffer _bb) { return GetRootAsSparseMatrix(_bb, new SparseMatrix()); }
  public static SparseMatrix GetRootAsSparseMatrix(ByteBuffer _bb, SparseMatrix obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SparseMatrix __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float W(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int WLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetWBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetWBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetWArray() { return __p.__vector_as_array<float>(4); }
  public int ColStarts(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ColStartsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetColStartsBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetColStartsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetColStartsArray() { return __p.__vector_as_array<int>(6); }
  public int RowIndices(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RowIndicesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRowIndicesBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetRowIndicesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetRowIndicesArray() { return __p.__vector_as_array<int>(8); }
  public int NumRows { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NumCols { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<ZivaRT.SparseMatrix> CreateSparseMatrix(FlatBufferBuilder builder,
      VectorOffset wOffset = default(VectorOffset),
      VectorOffset col_startsOffset = default(VectorOffset),
      VectorOffset row_indicesOffset = default(VectorOffset),
      int num_rows = 0,
      int num_cols = 0) {
    builder.StartTable(5);
    SparseMatrix.AddNumCols(builder, num_cols);
    SparseMatrix.AddNumRows(builder, num_rows);
    SparseMatrix.AddRowIndices(builder, row_indicesOffset);
    SparseMatrix.AddColStarts(builder, col_startsOffset);
    SparseMatrix.AddW(builder, wOffset);
    return SparseMatrix.EndSparseMatrix(builder);
  }

  public static void StartSparseMatrix(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddW(FlatBufferBuilder builder, VectorOffset wOffset) { builder.AddOffset(0, wOffset.Value, 0); }
  public static VectorOffset CreateWVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartWVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColStarts(FlatBufferBuilder builder, VectorOffset colStartsOffset) { builder.AddOffset(1, colStartsOffset.Value, 0); }
  public static VectorOffset CreateColStartsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateColStartsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartColStartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRowIndices(FlatBufferBuilder builder, VectorOffset rowIndicesOffset) { builder.AddOffset(2, rowIndicesOffset.Value, 0); }
  public static VectorOffset CreateRowIndicesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRowIndicesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowIndicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumRows(FlatBufferBuilder builder, int numRows) { builder.AddInt(3, numRows, 0); }
  public static void AddNumCols(FlatBufferBuilder builder, int numCols) { builder.AddInt(4, numCols, 0); }
  public static Offset<ZivaRT.SparseMatrix> EndSparseMatrix(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZivaRT.SparseMatrix>(o);
  }
};


}
