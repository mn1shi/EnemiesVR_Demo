// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ZivaRT
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

internal struct Skinning : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Skinning GetRootAsSkinning(ByteBuffer _bb) { return GetRootAsSkinning(_bb, new Skinning()); }
  public static Skinning GetRootAsSkinning(ByteBuffer _bb, Skinning obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Skinning __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float RestPoseInverse(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RestPoseInverseLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRestPoseInverseBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetRestPoseInverseBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetRestPoseInverseArray() { return __p.__vector_as_array<float>(4); }
  public ZivaRT.SparseMatrix? SkinningWeights { get { int o = __p.__offset(6); return o != 0 ? (ZivaRT.SparseMatrix?)(new ZivaRT.SparseMatrix()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ZivaRT.Skinning> CreateSkinning(FlatBufferBuilder builder,
      VectorOffset rest_pose_inverseOffset = default(VectorOffset),
      Offset<ZivaRT.SparseMatrix> skinning_weightsOffset = default(Offset<ZivaRT.SparseMatrix>)) {
    builder.StartTable(2);
    Skinning.AddSkinningWeights(builder, skinning_weightsOffset);
    Skinning.AddRestPoseInverse(builder, rest_pose_inverseOffset);
    return Skinning.EndSkinning(builder);
  }

  public static void StartSkinning(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRestPoseInverse(FlatBufferBuilder builder, VectorOffset restPoseInverseOffset) { builder.AddOffset(0, restPoseInverseOffset.Value, 0); }
  public static VectorOffset CreateRestPoseInverseVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRestPoseInverseVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRestPoseInverseVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkinningWeights(FlatBufferBuilder builder, Offset<ZivaRT.SparseMatrix> skinningWeightsOffset) { builder.AddOffset(1, skinningWeightsOffset.Value, 0); }
  public static Offset<ZivaRT.Skinning> EndSkinning(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZivaRT.Skinning>(o);
  }
};


}
