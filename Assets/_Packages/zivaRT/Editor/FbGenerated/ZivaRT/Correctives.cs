// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Runtime.CompilerServices;


[assembly: InternalsVisibleTo("Unity.ZivaRTPlayer.Editor")]
namespace ZivaRT
{
  using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;


internal struct Correctives : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Correctives GetRootAsCorrectives(ByteBuffer _bb) { return GetRootAsCorrectives(_bb, new Correctives()); }
  public static Correctives GetRootAsCorrectives(ByteBuffer _bb, Correctives obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Correctives __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ZivaRT.Network? PatchArray(int j) { int o = __p.__offset(4); return o != 0 ? (ZivaRT.Network?)(new ZivaRT.Network()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PatchArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The corrective computation mode for the patches
  public ZivaRT.CorrectiveType CorrectiveType { get { int o = __p.__offset(6); return o != 0 ? (ZivaRT.CorrectiveType)__p.bb.GetSbyte(o + __p.bb_pos) : ZivaRT.CorrectiveType.TensorSkin; } }
  public ZivaRT.ActiveTransformParts ActiveTransformParts { get { int o = __p.__offset(8); return o != 0 ? (ZivaRT.ActiveTransformParts)__p.bb.GetSbyte(o + __p.bb_pos) : ZivaRT.ActiveTransformParts.FullTransform; } }

  public static Offset<ZivaRT.Correctives> CreateCorrectives(FlatBufferBuilder builder,
      VectorOffset patch_arrayOffset = default(VectorOffset),
      ZivaRT.CorrectiveType corrective_type = ZivaRT.CorrectiveType.TensorSkin,
      ZivaRT.ActiveTransformParts active_transform_parts = ZivaRT.ActiveTransformParts.FullTransform) {
    builder.StartTable(3);
    Correctives.AddPatchArray(builder, patch_arrayOffset);
    Correctives.AddActiveTransformParts(builder, active_transform_parts);
    Correctives.AddCorrectiveType(builder, corrective_type);
    return Correctives.EndCorrectives(builder);
  }

  public static void StartCorrectives(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPatchArray(FlatBufferBuilder builder, VectorOffset patchArrayOffset) { builder.AddOffset(0, patchArrayOffset.Value, 0); }
  public static VectorOffset CreatePatchArrayVector(FlatBufferBuilder builder, Offset<ZivaRT.Network>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePatchArrayVectorBlock(FlatBufferBuilder builder, Offset<ZivaRT.Network>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPatchArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCorrectiveType(FlatBufferBuilder builder, ZivaRT.CorrectiveType correctiveType) { builder.AddSbyte(1, (sbyte)correctiveType, 0); }
  public static void AddActiveTransformParts(FlatBufferBuilder builder, ZivaRT.ActiveTransformParts activeTransformParts) { builder.AddSbyte(2, (sbyte)activeTransformParts, 0); }
  public static Offset<ZivaRT.Correctives> EndCorrectives(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ZivaRT.Correctives>(o);
  }
};


}
